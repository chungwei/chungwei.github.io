<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>http://chungwei.github.io/</link>
    <description>Recent content on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 31 May 2016 15:32:34 +0800</lastBuildDate>
    <atom:link href="http://chungwei.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Golang 实现定时器</title>
      <link>http://chungwei.github.io/2016/05/31/time-ticker/</link>
      <pubDate>Tue, 31 May 2016 15:32:34 +0800</pubDate>
      
      <guid>http://chungwei.github.io/2016/05/31/time-ticker/</guid>
      <description>

&lt;h4 id=&#34;背景:77fc8fb2b53b076ae41e512db55d0a71&#34;&gt;背景&lt;/h4&gt;

&lt;p&gt;定时任务的实现方式有多种，常用的是使用 &lt;code&gt;crontab&lt;/code&gt;。最近的一个项目需要有执行定时（每5分钟）任务的需求，要求
不能使用 &lt;code&gt;crontab&lt;/code&gt;，于是在程序中使用 &lt;code&gt;golang&lt;/code&gt; 实现了。&lt;/p&gt;

&lt;h4 id=&#34;crontab-实现:77fc8fb2b53b076ae41e512db55d0a71&#34;&gt;crontab 实现&lt;/h4&gt;

&lt;p&gt;假设使用 &lt;code&gt;crontab&lt;/code&gt;，会是这样的：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;*/5 * * * * sh /path/to/script.sh 
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;small&gt;配置释义：分 时 日 月 周 命令&lt;/small&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;golang-实现:77fc8fb2b53b076ae41e512db55d0a71&#34;&gt;golang 实现&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;
)
func main() {
    ticker := time.NewTicker(time.Second * time.Duration(300))

    for curTime := range ticker.C {
        fmt.Println(curTime)
        // doSth.
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Git 使用笔记</title>
      <link>http://chungwei.github.io/2016/05/14/git/</link>
      <pubDate>Sat, 14 May 2016 09:10:58 +0800</pubDate>
      
      <guid>http://chungwei.github.io/2016/05/14/git/</guid>
      <description>

&lt;p&gt;关于&lt;code&gt;Git&lt;/code&gt;的介绍实在太多，Google 或 百度一下 就有，不再介绍。&lt;/p&gt;

&lt;p&gt;个人接触 &lt;code&gt;Git&lt;/code&gt; 已经差不多三年，第一次使用&lt;code&gt;Git&lt;/code&gt;作为版本管理工具时，网上查查资料也能使用，
但习惯了&lt;code&gt;Svn&lt;/code&gt;的客户端，感觉学习&lt;code&gt;Git&lt;/code&gt;的曲线很陡，很多命令总是很容易搞混或忘记，
后来换工作又切回&lt;code&gt;Svn&lt;/code&gt;了。直到最近加到新的Team，完全使用&lt;code&gt;Git&lt;/code&gt;，经过不断请教和学习，
该把成果整理归纳一下，以备今后查询。&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;基本操作命令:1c1ef82aae62aeea8eedcb5f455b129b&#34;&gt;基本操作命令&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;仓库初始化&lt;/strong&gt;&lt;br /&gt;
个人认为实际用到的不多，一般都是现有的代码仓库，直接克隆下来，里面就有&lt;code&gt;.git&lt;/code&gt; 目录&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git init # 生成 .git 目录
git remote add origin git@github.com:my-name/proj.git # 本地和远程仓库关联
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;获取远程仓库&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git@github.com:my-name/proj.git
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;查看仓库状态&lt;/strong&gt;&lt;br /&gt;
提交之前，先看一下本次 修改、删除、新增 了哪些文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git status
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;查看变更前后的差异&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git diff [/path/to/file]  # 可指定文件，展示工作区和最新提交之间的差异，commit之前建议使用
git diff --stat  # 展示工作区和最新提交之间的差异，只有文件名和行数
git diff HEAD  # 比较本次提交和上次提交之间的差异，push之前建议使用
git diff 2265d4a86 4b94416057 # 比较两个历史版本之间的差异
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;提交文件&lt;/strong&gt;&lt;br /&gt;
提交仓库的变更，新增和修改文件命令相同&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add /path/to/file1 [/path/to/file2...]  # 提交到本地暂存区，可同时提交多个文件
git commit -m &#39;提交文件&#39;  # 保存暂存区的变更到当前分支
git push origin branch-name  # 把变更文件推到当前分支对应的远程仓库
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;提交所有文件，可以使用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add -A
git commit -m &#39;提交所有文件&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或简写为&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git commit -am &#39;简写:提交所有文件&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如提交之后，想修改最近一次提交信息，可使用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git commit --amend
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;文件重命名或移动&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git mv /path/to/old-file /path/to/new-file
git commit -m &#39;文件重命名&#39;
git push origin branch-name
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;删除文件&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git rm /path/to/file
git commit -m &#39;删除文件&#39;
git push origin branch-name
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;查看提交记录&lt;/strong&gt;&lt;br /&gt;
log 会已提交时间由近及远展示（不能看已删除的 commit log）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git log # 展示提交的哈希值、合并信息、作者、提交时间和备注信息
git log /path/to/file # 展示指定文件/目录提交的哈希值、合并信息、作者、提交时间和备注信息
git log --pretty=short # 展示提交的哈希值、合并信息、作者和备注信息的第一行
git log --pretty=online # 一行展示提交的哈希值、备注信息
git log --graph # 简单图形展示每次提交的分支及其分化衍合情况
git log -p [/path/to/file] # -p 会展示前后差异
git log --stat # 展示每次提交新增或删除的文件行数
git log --grep=test # 展示包含test关键字的提交
git log --author=myname # 展示作者是myname的提交
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那么，有时想查看包括已删除在内的所有commit log，则使用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git reflog
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;查看分支&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git branch # 查看本地分支
git branch -r # 查看远程分支
git branch -a # 查看所有分支
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;新建分支&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git branch new-branch-1 # 新建分支
git checkout new-branch-1 # 切换新分支
git checkout master # 切换回到master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可简写为&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout -b new-branch-1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用以下命令即可把本地分支推送到远程&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git push origin new-branch-1
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;分支重命名&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git branch -m old-branch-name new-branch-name
git branch -M old-branch-name new-branch-name # 如已存在则强行覆盖
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;推送到远程，&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git push origin new-branch-name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此时，远程同时存在两个分支 &lt;code&gt;old-branch-name&lt;/code&gt; 和 &lt;code&gt;new-branch-name&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;删除分支&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout master # 不能删除当前所在分支
git branch -d old-branch-name # 删除本地分支，如有未合并的代码，将会删除失败
git branch -D old-branch-name # 强行删除，即使有未合并的代码
git push origin --delete old-branch-name # 删除远程分支
git push origin :old-branch-name # 把空推送到远程，也相当于删除远程分支
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;本地分支推送至远程仓库&lt;/strong&gt;&lt;br /&gt;
在推送之前，首先要确保本地已经跟远程仓库关联 &lt;code&gt;参看步骤1&lt;/code&gt;，再推送&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git push origin new-branch-1
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;获取远程分支&lt;/strong&gt;&lt;br /&gt;
建议本地和远程分支的名称保持一致&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout -b new-branch-2 origin/new-branch-2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将远程分支的最新代码同步到本地&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git pull origin new-branch-2 # 会自动merge  
# 等同于如下命令，注意git pull 和 git fetch 的区别
git fetch origin
git merge origin/new-branch-2
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;分支合并&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout master
git merge --no-ff new-branch-1 # --no-ff 会把本次合并记录到历史记录中
git branch --merged # 查看已合并的分支
git branch --no-merged # 查看未合并的分支
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;冲突解决&lt;/strong&gt;&lt;br /&gt;
当发生冲突时，打开冲突文件编辑，再参考 &lt;code&gt;步骤5&lt;/code&gt; 提交即可&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;撤销修改&lt;/strong&gt;&lt;br /&gt;
在提交到暂存区之前，需撤销某个文件的修改，则使用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout -- filename
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如已经提交到暂存区，但未commit，则使用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git reset HEAD filename
git checkout -- filename
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;还有一种情况，就是恢复已删除的文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rm filename # 发现误删了
git checkout -- filename # 即可恢复
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;版本回退&lt;/strong&gt;&lt;br /&gt;
&lt;code&gt;--hard&lt;/code&gt;表示彻底回退&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git reset --hard HEAD~1 # 本地回退到上一个历史版本
git reset --hard 3b40bcb448c5b3 # 本地回到指定版本，可以是当前版本之前或之后的某一个版本
git reset --hard origin/master # 本地版本回到跟远程一样
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;查看远程库信息&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git remote -v
git remote show origin # 查看某个远程仓库的详细信息
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;暂存变更信息&lt;/strong&gt;&lt;br /&gt;
开发过程中，难免遇到紧急插入的需求，不得不停下手头去处理问题，这时候就需要保留现场（包括
暂存区和工作区的内容），可使用如下命令&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git stash # 对当前的暂存区和工作区状态进行保存
git stash list # 查看保存的现场
git stash pop # 恢复保存的现场并删除现场快照
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;忽略文件和目录&lt;/strong&gt;&lt;br /&gt;
一些文件不想提交，可配置为忽略，在根目录下的文件&lt;code&gt;.gitignore&lt;/code&gt; 加入要忽略的文件和目录即可。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;举个栗子:1c1ef82aae62aeea8eedcb5f455b129b&#34;&gt;举个栗子&lt;/h4&gt;

&lt;p&gt;在实际的使用过程中，很多Team 一般使用 Github、Gitlab、Bitbucket等进行管理。下面以 &lt;code&gt;Github&lt;/code&gt;为例。&lt;/p&gt;

&lt;p&gt;现在&lt;code&gt;Github&lt;/code&gt; 上已有项目 &lt;code&gt;test_proj&lt;/code&gt;，地址为 &lt;code&gt;git@github.com:my-org/test_proj.git&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;small&gt;项目名称都是虚构&lt;/small&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;首先，在 &lt;code&gt;Github&lt;/code&gt;上&lt;code&gt;fork&lt;/code&gt;这个项目，完成之后你的开发分支就变成
&lt;code&gt;git@github.com:your-name/test_proj.git&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;将自己的开发分支克隆到本地&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git@github.com:your-name/test_proj.git # 克隆项目
cd test_proj/
git remote add upstream git@github.com:my-org/test_proj.git # 很关键，设置个人分支的源仓库
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在本地开发，期间的新增、修改、删除源文件以及提交等操作（参考&lt;code&gt;基本操作命令&lt;/code&gt;即可），
都不会对源仓库有影响。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;开发完成并通过测试之后，代码需合入源仓库，提个 &lt;code&gt;Pull Request&lt;/code&gt;（简称&lt;code&gt;PR&lt;/code&gt;），就可以等待项目的
owner 进行代码审查和合并了。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;实际开发过程中，很可能是多人协作，每个人都&lt;code&gt;fork&lt;/code&gt;自己的分支，提&lt;code&gt;PR&lt;/code&gt;也有先后顺序，也许我们提&lt;code&gt;PR&lt;/code&gt;
时，源仓库的代码已经经过了几次迭代，那么发生冲突的可能性就非常大。&lt;br /&gt;
为了尽可能避免代码冲突，&lt;code&gt;设置个人分支的源仓库&lt;/code&gt; 这个步骤就显得非常关键了，我们要在设置好源仓库之后，
在开发过程中，经常同步源仓库的代码，使用如下命令即可&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git pull upstream master # 同步master的最新代码到本地
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;目前团队使用的这种模式，这也跟开源项目的模式是一致的，我个人也非常喜欢，省事！&lt;/p&gt;

&lt;p&gt;之前使用 &lt;code&gt;Git-flow&lt;/code&gt;模式开发，每次开发都需要从&lt;code&gt;master&lt;/code&gt;新建分支，&lt;code&gt;merge&lt;/code&gt; 之后再删除分支，
每次需求来了就反复&lt;code&gt;新建分支，删除分支&lt;/code&gt;。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;学习&lt;code&gt;Git&lt;/code&gt; 确实曲线比&lt;code&gt;Svn&lt;/code&gt;陡，查了不少资料，还专门买了两本书来啃，花了大半个月，累死我了！
不过确实非常有收获，也非常开心，周末没出门，宅家里两天写完这篇博客，算是一个小小的总结吧！^_^&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;参考文献:1c1ef82aae62aeea8eedcb5f455b129b&#34;&gt;参考文献&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/book/zh/v1&#34;&gt;《Pro Git》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;《GitHub入门与实践》大塚弘记 (作者)&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Expect 实现 Linux 远程登录</title>
      <link>http://chungwei.github.io/2016/05/11/shell-expect/</link>
      <pubDate>Wed, 11 May 2016 10:49:46 +0800</pubDate>
      
      <guid>http://chungwei.github.io/2016/05/11/shell-expect/</guid>
      <description>

&lt;h4 id=&#34;背景:594a8c577dddc6215feb74a35737f6bb&#34;&gt;背景&lt;/h4&gt;

&lt;p&gt;远程登录时工作中经常遇到的问题，之前的解决办法要么是老老实实手工输入密码，要么是两台机器建立
信任关系，但总感觉很麻烦，特别是机器多了，实在影响效率！&lt;/p&gt;

&lt;p&gt;最好的办法，是不需配置信任关系即可实现自动远程登录。&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;实现:594a8c577dddc6215feb74a35737f6bb&#34;&gt;实现&lt;/h4&gt;

&lt;p&gt;使用 expect 即可实现，具体实现如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/expect

# 设置超时时间为 3 秒
set timeout 3

# 设置要登录的主机 IP 地址
set host 10.10.38.232

# 设置以什么名字的用户登录
set name root
# 设置用户名的登录密码
set password 111222333

#spawn 一个 ssh 登录进程
spawn  ssh $host -l $name

# 等待响应，第一次登录往往会提示是否永久保存 RSA 到本机的 know hosts 列表中；等到回答后，在提示输出密码；之后就直接提示输入密码
expect {
   &amp;quot;(yes/no)?&amp;quot; {
       send &amp;quot;yes\n&amp;quot;
       expect &amp;quot;password:&amp;quot;
       send &amp;quot;$pasword\n&amp;quot;
   }
   &amp;quot;password:&amp;quot; {
       send &amp;quot;$password\n&amp;quot;
   }
}

# 这里使用了 interact 命令，使执行完程序后，用户可以在 $host 终端进行交互操作。
interact
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;参考文献:594a8c577dddc6215feb74a35737f6bb&#34;&gt;参考文献&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ibm.com/developerworks/cn/aix/library/0909_jinjh_unixlogin/&#34;&gt;Unix/Linux 系统自动化管理: 远程登录篇&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Pexpect 实现 Linux 远程登录执行命令</title>
      <link>http://chungwei.github.io/2016/05/09/python-pexpect/</link>
      <pubDate>Mon, 09 May 2016 11:03:27 +0800</pubDate>
      
      <guid>http://chungwei.github.io/2016/05/09/python-pexpect/</guid>
      <description>

&lt;h4 id=&#34;需求:20f0c714d858a84276d2ee469ac66aca&#34;&gt;需求&lt;/h4&gt;

&lt;p&gt;最近接到一个小需求：检测目前在线的机器是否重装过系统。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;small&gt;由于涉及敏感信息，具体细节不描述，只记录大概思路和代码示例&lt;/small&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;解决思路:20f0c714d858a84276d2ee469ac66aca&#34;&gt;解决思路&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;连接、登录远程机器&lt;/li&gt;
&lt;li&gt;在远程机器执行命令&lt;/li&gt;
&lt;li&gt;获取执行结果&lt;/li&gt;
&lt;li&gt;处理执行结果&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;代码示例:20f0c714d858a84276d2ee469ac66aca&#34;&gt;代码示例&lt;/h4&gt;

&lt;p&gt;由于对 Shell 不太熟悉，采用了 Python Pexpect 实现，代码示例如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pexpect

def ssh_cmd(ip, passwd, cmd):
    ret = -1
    try:
        ssh = pexpect.spawn(&#39;ssh root@%s &amp;quot;%s&amp;quot;&#39; % (ip, cmd))
        ssh.expect(&#39;password: &#39;)
        ssh.sendline(passwd)
        r = ssh.read()
        print ssh.before
        ret = 0
    except Exception as ex:
        print &#39;ip=&#39;,ip,&#39;,ex=&#39;,ex
        ret = -1
    except pexpect.TIMEOUT:
        print &#39;ip=&#39;,ip,&#39;,TIMEOUT&#39;
        ret = -2
    
    ssh.close() 
    return ret

cmds=&#39;ps -U root -u root -N | wc -l&#39;
pwd=&#39;hhjjkkk&#39;
try:
    f = open(&amp;quot;./ip_list.txt&amp;quot;)
    for line in f:
        ip = line.strip(&#39;\n&#39;)
        ret = ssh_cmd(ip, pwd, cmds)
        # proc ret
    f.close()
except Exception as ex:
    print ex
    f.close()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>我的书架</title>
      <link>http://chungwei.github.io/2016/05/03/books/</link>
      <pubDate>Tue, 03 May 2016 11:29:00 +0800</pubDate>
      
      <guid>http://chungwei.github.io/2016/05/03/books/</guid>
      <description>

&lt;h4 id=&#34;已阅读:dbc19c2f13d02e3f5b18602966a5728f&#34;&gt;已阅读&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;《GitHub入门与实践》&lt;/code&gt;&lt;br /&gt;
大塚弘记 (作者), 支鹏浩 (译者), 刘斌 (译者)&lt;br /&gt;
图文并茂，通俗易懂，对于如何使用 Git + GitHub 进行协作开发（fork 和 GitFlow 模式）讲解很细致，
还举了具体例子，很赞。唯一的不足，是书中的图片质量有待提高！&lt;br /&gt;
——2016-05&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;《图解HTTP》&lt;/code&gt;&lt;br /&gt;
图灵程序设计丛书，[日]上野 (作者)，宣 (作者)， 于均良 (译者)&lt;br /&gt;
图文并茂，简单通俗易懂，适合初级开发人员。&lt;br /&gt;
——2016-04&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;《程序员跳槽全攻略》&lt;/code&gt;&lt;br /&gt;
Easy (作者)&lt;br /&gt;
写得不错，对职业规划有很大帮助。&lt;br /&gt;
——2016-04&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;《Go Web编程》&lt;/code&gt;&lt;br /&gt;
谢孟军 (作者)&lt;br /&gt;
Golang Web 开发的入门书籍，前部分讲解 Golang 基本知识，后部分讲述如何使用 Golang
（Beego） 进行 Web 开发。&lt;br /&gt;
——2015-08&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;《Redis设计与实现》&lt;/code&gt;&lt;br /&gt;
数据库技术丛书，黄健宏 (作者)&lt;br /&gt;
写得相当好，Redis 的原理都有涉及，收获相当大。&lt;br /&gt;
——2015-02&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;《大型网站技术架构:核心原理与案例分析》&lt;/code&gt;&lt;br /&gt;
李智慧 (作者)&lt;br /&gt;
结合案例分析，全面讲述了如何打造一个高性能高可用的应用，对于一些初级开发人员，可作为学习指南，
按照作者提到的每一个方面去提升自我。&lt;br /&gt;
——2013-11&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;想阅读:dbc19c2f13d02e3f5b18602966a5728f&#34;&gt;想阅读&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;《程序员修炼之道:从小工到专家》&lt;/code&gt;&lt;br /&gt;
亨特 (Andrew Hunt) (作者)， 托马斯 (David Thomas) (作者)， 马维达 (译者)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;《计算机是怎样跑起来的》&lt;/code&gt;&lt;br /&gt;
矢泽久雄 (作者), 胡屹 (译者)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;《程序是怎样跑起来的》&lt;/code&gt;&lt;br /&gt;
[日]矢泽久雄 (作者), 李逢俊 (译者)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;《图解TCP/IP(第5版)》&lt;/code&gt;&lt;br /&gt;
图灵程序设计丛书，竹下隆史 (作者), 村山公保 (作者), 荒井透 (作者), 苅田幸雄 (作者), 乌尼日其其格 (译者)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;《Go并发编程实战》&lt;/code&gt;&lt;br /&gt;
郝林 (作者)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Markdown 使用笔记</title>
      <link>http://chungwei.github.io/2016/05/01/markdown/</link>
      <pubDate>Sun, 01 May 2016 16:54:46 +0800</pubDate>
      
      <guid>http://chungwei.github.io/2016/05/01/markdown/</guid>
      <description>

&lt;h4 id=&#34;标题:d59f7b4dfecd890f0583fb0bac5a436e&#34;&gt;标题&lt;/h4&gt;

&lt;p&gt;使用 &lt;code&gt;#&lt;/code&gt; 控制标题，建议后面加上一个空格，如&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 一级标题
## 二级标题
### 三级标题
#### 四级标题
##### 五级标题
###### 六级标题
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;一级标题:d59f7b4dfecd890f0583fb0bac5a436e&#34;&gt;一级标题&lt;/h1&gt;

&lt;h2 id=&#34;二级标题:d59f7b4dfecd890f0583fb0bac5a436e&#34;&gt;二级标题&lt;/h2&gt;

&lt;h3 id=&#34;三级标题:d59f7b4dfecd890f0583fb0bac5a436e&#34;&gt;三级标题&lt;/h3&gt;

&lt;h4 id=&#34;四级标题:d59f7b4dfecd890f0583fb0bac5a436e&#34;&gt;四级标题&lt;/h4&gt;

&lt;h5 id=&#34;五级标题:d59f7b4dfecd890f0583fb0bac5a436e&#34;&gt;五级标题&lt;/h5&gt;

&lt;h6 id=&#34;六级标题:d59f7b4dfecd890f0583fb0bac5a436e&#34;&gt;六级标题&lt;/h6&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;字体大小:d59f7b4dfecd890f0583fb0bac5a436e&#34;&gt;字体大小&lt;/h4&gt;

&lt;p&gt;Markdown 貌似不能控制正文的字体变大或者变小，本人一般直接使用HTML标签控制，如字体
&lt;big&gt;变大&lt;/big&gt; 使用 &lt;code&gt;&amp;lt;big&amp;gt;变大&amp;lt;/big&amp;gt;&lt;/code&gt; ，字体 &lt;small&gt;变小&lt;/small&gt; 使用 &lt;code&gt;&amp;lt;small&amp;gt;变小&amp;lt;/small&amp;gt;&lt;/code&gt; 。&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;粗体-斜体:d59f7b4dfecd890f0583fb0bac5a436e&#34;&gt;粗体、斜体&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;**加粗**&lt;/code&gt; 表示字体 &lt;strong&gt;加粗&lt;/strong&gt;，&lt;code&gt;*斜体*&lt;/code&gt; 表示 &lt;em&gt;斜体&lt;/em&gt; 。&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;列表:d59f7b4dfecd890f0583fb0bac5a436e&#34;&gt;列表&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;有序列表&lt;/strong&gt;&lt;br /&gt;
&lt;code&gt;.&lt;/code&gt;后建议有一个空格&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. 有序列表
1. 有序列表
1. 有序列表
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;有序列表&lt;/li&gt;
&lt;li&gt;有序列表&lt;/li&gt;
&lt;li&gt;有序列表&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;无序列表&lt;/strong&gt;&lt;br /&gt;
&lt;code&gt;-&lt;/code&gt;前后各有一个空格&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; - 无序列表
 - 无序列表
 - 无序列表
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;无序列表&lt;/li&gt;
&lt;li&gt;无序列表&lt;/li&gt;
&lt;li&gt;无序列表&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;代码块:d59f7b4dfecd890f0583fb0bac5a436e&#34;&gt;代码块&lt;/h4&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;段落:d59f7b4dfecd890f0583fb0bac5a436e&#34;&gt;段落&lt;/h4&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;换行:d59f7b4dfecd890f0583fb0bac5a436e&#34;&gt;换行&lt;/h4&gt;

&lt;p&gt;可使用 &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; 或 行末两个空格 &lt;code&gt;　&lt;/code&gt; 表示换行&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;分割线:d59f7b4dfecd890f0583fb0bac5a436e&#34;&gt;分割线&lt;/h4&gt;

&lt;p&gt;使用一行 &lt;code&gt;---&lt;/code&gt; 即可表示分割线，如&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;分割前

---

分割后
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;链接:d59f7b4dfecd890f0583fb0bac5a436e&#34;&gt;链接&lt;/h4&gt;

&lt;p&gt;比如 &lt;code&gt;[百度](http://www.baidu.com)&lt;/code&gt; 即可链接到 &lt;a href=&#34;http://www.baidu.com&#34;&gt;百度&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;图片:d59f7b4dfecd890f0583fb0bac5a436e&#34;&gt;图片&lt;/h4&gt;

&lt;p&gt;比如 &lt;code&gt;![Alt信息](/img/pkg.jpg)&lt;/code&gt; 会显示以下图片&lt;br /&gt;
&lt;img src=&#34;http://chungwei.github.io/img/pkg.jpg&#34; alt=&#34;Alt信息&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;small&gt;若要控制图片大小和位置，建议使用 &lt;code&gt;img 标签&lt;/code&gt;&lt;/small&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;引用:d59f7b4dfecd890f0583fb0bac5a436e&#34;&gt;引用&lt;/h4&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;表格:d59f7b4dfecd890f0583fb0bac5a436e&#34;&gt;表格&lt;/h4&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;uml:d59f7b4dfecd890f0583fb0bac5a436e&#34;&gt;UML&lt;/h4&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;数学公式:d59f7b4dfecd890f0583fb0bac5a436e&#34;&gt;数学公式&lt;/h4&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;特殊符号:d59f7b4dfecd890f0583fb0bac5a436e&#34;&gt;特殊符号&lt;/h4&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;参考文档:d59f7b4dfecd890f0583fb0bac5a436e&#34;&gt;参考文档&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://wowubuntu.com/markdown/&#34;&gt;Markdown 语法说明 (简体中文版)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>使用 Hugo Github 搭建博客</title>
      <link>http://chungwei.github.io/2016/04/25/blog-hugo-github/</link>
      <pubDate>Mon, 25 Apr 2016 13:43:49 +0800</pubDate>
      
      <guid>http://chungwei.github.io/2016/04/25/blog-hugo-github/</guid>
      <description>

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;本文主要介绍如何使用&lt;code&gt;Hugo&lt;/code&gt;在&lt;code&gt;Github&lt;/code&gt;搭建免费的个人博客，关于&lt;code&gt;Hugo&lt;/code&gt;
可在其&lt;a href=&#34;https://gohugo.io&#34;&gt;官网&lt;/a&gt;上进一步了解。&lt;/p&gt;

&lt;h4 id=&#34;环境介绍:f891efab5b1bfc4f5ede16e75d3ca708&#34;&gt;环境介绍&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Mac OSX 10.11.1&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;项目根路径 ~/www/&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;搭建步骤:f891efab5b1bfc4f5ede16e75d3ca708&#34;&gt;搭建步骤&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在&lt;code&gt;Github&lt;/code&gt;创建两个仓库，比如&lt;code&gt;blog.hugo&lt;/code&gt;和&lt;code&gt;chungwei.github.io&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;安装&lt;code&gt;Hugo&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install hugo
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;使用&lt;code&gt;Hugo&lt;/code&gt;创建站点&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd ~/www
hugo new site blog.hugo
cd blog.hugo/
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;本地仓库和远程仓库关联&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git init
git remote add origin https://github.com/your-name/blog.hugo.git
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;创建页面&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;hugo new about.md
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;下载站点主题&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git submodule add https://github.com/dim0627/hugo_theme_beg.git themes/beg
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;启动服务&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;hugo server -w --theme=beg --buildDrafts
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;浏览器访问 &lt;a href=&#34;http://localhost:1313/&#34;&gt;http://localhost:1313/&lt;/a&gt;&lt;br /&gt;
看到如下图页面，说明本地搭建博客已经没问题了。接下来就是如何挂到 &lt;code&gt;Github&lt;/code&gt;上。
&lt;img src=&#34;http://chungwei.github.io/img/demo.png&#34; style=&#34;width:100%&#34;&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;提交&lt;code&gt;blog.hugo&lt;/code&gt; 到远程仓库&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git add -A
git commit -m &#39;commit demo&#39;
git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;生成站点页面&lt;br /&gt;
执行完命令，目录下会多一个 &lt;code&gt;public&lt;/code&gt; 目录，要发布到 &lt;code&gt;Github&lt;/code&gt; 的博客页面就在该目录中&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;rm -rf public
hugo --buildDrafts -t beg
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;检出博客页面远程仓库&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd ~/www
git clone https://github.com/your-name/chungwei.github.io.git
cd chungwei.github.io/
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;复制本地博客页面到该仓库&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cp -R ~/www/blog.hugo/public/* .
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;提交 &lt;code&gt;chungwei.github.io&lt;/code&gt; 到远程仓库&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git add -A
git commit -m &#39;ci demo&#39;
git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;浏览器访问 &lt;a href=&#34;http://chungwei.github.io/&#34;&gt;http://chungwei.github.io/&lt;/a&gt;&lt;br /&gt;
看到 &lt;code&gt;步骤8&lt;/code&gt;页面，说明博客搭建成功。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;small&gt;可能存在这样的情况：&lt;br /&gt;
访问 &lt;code&gt;http://chungwei.github.io 出现404&lt;/code&gt;，但访问 &lt;code&gt;http://chungwei.github.io/about&lt;/code&gt;
是正常的，原因是仓库&lt;code&gt;chungwei.github.io缺少README.md&lt;/code&gt;，创建该文件即可解决
&lt;/small&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;安装插件:f891efab5b1bfc4f5ede16e75d3ca708&#34;&gt;安装插件&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;评论功能&lt;/strong&gt;&lt;br /&gt;
国外的有 &lt;a href=&#34;https://disqus.com/&#34;&gt;disqus&lt;/a&gt;，国内的有 &lt;a href=&#34;http://duoshuo.com/&#34;&gt;多说&lt;/a&gt;，
因为多说支持国内第三方账号登录，下面简单说一下如何配置：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;注册多说账号，按照引导一步步往下走即可；&lt;/li&gt;
&lt;li&gt;完成后，提示将一段 js 代码引入页面；&lt;/li&gt;
&lt;li&gt;将 js 代码放在 &lt;code&gt;layout/partials/duoshuo.html&lt;/code&gt; 中；&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;config.toml&lt;/code&gt; 的 &lt;code&gt;[params]&lt;/code&gt; 节点下加入配置项 &lt;code&gt;duoshuoShortname = &amp;quot;your-blog-name&amp;quot;&lt;/code&gt;，
注意：&lt;code&gt;your-blog-name&lt;/code&gt; 是在注册多说账号时填的名称；&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在页面中引用 &lt;code&gt;layout/partials/duoshuo.html&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;{{ if .Site.Params.duoshuoShortname }}
{{ partial &amp;quot;duoshuo.html&amp;quot; . }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;代码高亮&lt;/strong&gt;&lt;br /&gt;
在文件头部设置变量 &lt;code&gt;highlight = true&lt;/code&gt; 即可。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;small&gt;之前尝试在 &lt;code&gt;config.toml&lt;/code&gt; 文件中设置，都不生效&lt;/small&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;参考资料:f891efab5b1bfc4f5ede16e75d3ca708&#34;&gt;参考资料&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/overview/quickstart/&#34;&gt;Hugo官网文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tonybai.com/2015/09/23/intro-of-gohugo/&#34;&gt;使用Hugo搭建静态站点&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>http://chungwei.github.io/about/</link>
      <pubDate>Sun, 24 Apr 2016 15:54:32 +0800</pubDate>
      
      <guid>http://chungwei.github.io/about/</guid>
      <description>&lt;p&gt;每天往来于 上地 和 回龙观 之间的猿&amp;hellip;&lt;/p&gt;

&lt;p&gt;平时填各种坑，主要使用 &lt;code&gt;PHP&lt;/code&gt; 和 &lt;code&gt;Golang&lt;/code&gt;，也填过 &lt;code&gt;JS/CSS/HTML&lt;/code&gt; 的坑。。。&lt;/p&gt;

&lt;p&gt;做过&lt;code&gt;在线教育&lt;/code&gt;，做&lt;code&gt;电商&lt;/code&gt;给亚非拉倒卖过商品，现在做 &lt;code&gt;O2O&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://chungwei.github.io/img/tech.png&#34; style=&#34;width:100%&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://chungwei.github.io/me/</link>
      <pubDate>Sun, 24 Apr 2016 15:42:11 +0800</pubDate>
      
      <guid>http://chungwei.github.io/me/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;宗伟　|　5年PHP经验　|　现居北京&lt;/strong&gt;&lt;br /&gt;
&lt;small&gt;
热爱并专注于互联网，长期使用 PHP 作为第一语言，理解 PHP MVC；关注互联网新技术，
对所学技术可以快速应用于实际项目中，2015年开始使用 Golang 进行项目开发。&lt;br /&gt;
工作中，曾负责日PV亿级项目的研发和维护，具备处理高并发经验；具备良好的自我驱动意识和项目推动能力，
协调RD和QA高效完成PM的需求。&lt;br /&gt;
生活中，为人乐观随和，处事积极主动，参与打篮球和跑步；宅的时候，一般看看历史，折腾折腾博客。
&lt;/small&gt;&lt;/p&gt;

&lt;h4 id=&#34;工作经历:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;工作经历&lt;/h4&gt;

&lt;p&gt;&lt;small&gt;
&lt;strong&gt;• 滴滴出行　　2014.07 ~ 至今&lt;/strong&gt;&lt;br /&gt;
 - 公共技术部　　Golang工程师&lt;br /&gt;
&lt;em&gt;作为负责人，负责 CMDB 的研发和维护工作；&lt;/em&gt;&lt;br /&gt;
 - 平台事业部　　PHP工程师&lt;br /&gt;
&lt;em&gt;作为负责人，参与 券系统 从无到有的完整过程以及后续的维护工作；&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;参与 支付业务 和 积分系统 的研发；&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;• 易宝电商　　2013.08 ~ 2014.07&lt;/strong&gt;&lt;br /&gt;
 - 信息系统部　　PHP工程师&lt;br /&gt;
&lt;em&gt;负责海外电商平台 &lt;a href=&#34;http://www.dxlisting.com&#34;&gt;www.dxlisting.com&lt;/a&gt; 整站的研发和维护；&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;• 百　　度　　2013.08 ~ 2014.07&lt;/strong&gt;&lt;br /&gt;
 - 移动云事业部　PHP工程师&lt;br /&gt;
&lt;em&gt;负责 移动运营支撑系统-打包平台 整站的研发和维护；&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;• 盈禾优仕　　2011.11 ~ 2013.06&lt;/strong&gt;&lt;br /&gt;
 - 技术部　　　　PHP工程师&lt;br /&gt;
&lt;em&gt;参与&lt;a href=&#34;http://www.kaomanfen.com&#34;&gt;考满分&lt;/a&gt;平台下多个业务线的研发，
如 考司法网、考GMAT网 和 找题目学习网 等；&lt;/em&gt;
&lt;/small&gt;&lt;/p&gt;

&lt;h4 id=&#34;专业技能:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;专业技能&lt;/h4&gt;

&lt;p&gt;&lt;small&gt;
熟悉 PHP ，具备 Zend、CI、Kohana、Smarty 项目经验；掌握 Golang，具备项目经验。&lt;br /&gt;
熟悉 MySQL 和 NoSQL，具备处理百亿条数据存储经验。&lt;br /&gt;
熟悉 Linux，能熟练搭建 LA(N)MP 及线上运维。&lt;br /&gt;
掌握 jQuery 和 Twitter Bootstrap 等前端框架；熟练使用 SVN 和 Git。&lt;br /&gt;
&lt;/small&gt;&lt;/p&gt;

&lt;h4 id=&#34;教育经历:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;教育经历&lt;/h4&gt;

&lt;p&gt;&lt;small&gt;
大连民族学院　　计算机科学与工程学院　　网络工程(本科)　　2008.09~2012.07
&lt;/small&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>